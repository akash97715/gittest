data: {"choices":[{"delta":{"content":","},"finish_reason":null,"index":0}],"created":1718269902,"id":"chatcmpl-9Zamcprj42LKCNbfcN6kNaSRrNDvt","model":"gpt-4-32k","object":"chat.completion.chunk","system_fingerprint":null}data: {"choices":[{"delta":{"content":" India"},"finish_reason":null,"index":0}],"created":1718269902,"id":"chatcmpl-9Zamcprj42LKCNbfcN6kNaSRrNDvt","model":"gpt-4-32k","object":"chat.completion.chunk","system_fingerprint":null}data: {"choices":[{"delta":{"content":"."},"finish_reason":null,"index":0}],"created":1718269902,"id":"chatcmpl-9Zamcprj42LKCNbfcN6kNaSRrNDvt","model":"gpt-4-32k","object":"chat.completion.chunk","system_fingerprint":null}data: {"choices":[{"delta":{},"finish_reason":"stop","index":0}],"created":1718269902,"id":"chatcmpl-9Zamcprj42LKCNbfcN6kNaSRrNDvt","model":"gpt-4-32k","object":"chat.completion.chunk","system_fingerprint":null}data: [DONE]
---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)File d:\docinsightenv\Lib\site-packages\urllib3\response.py:761, in HTTPResponse._update_chunk_length(self)    760 try:--> 761     self.chunk_left = int(line, 16)    762 except ValueError:    763     # Invalid chunked protocol response, abort.  ValueError: invalid literal for int() with base 16: b'' During handling of the above exception, another exception occurred: InvalidChunkLength                        Traceback (most recent call last)File d:\docinsightenv\Lib\site-packages\urllib3\response.py:444, in HTTPResponse._error_catcher(self)    443 try:--> 444     yield    446 except SocketTimeout:    447     # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but    448     # there is yet no clean way to get at it from this context.  File d:\docinsightenv\Lib\site-packages\urllib3\response.py:828, in HTTPResponse.read_chunked(self, amt, decode_content)    827 while True:--> 828     self._update_chunk_length()    829     if self.chunk_left == 0: File d:\docinsightenv\Lib\site-packages\urllib3\response.py:765, in HTTPResponse._update_chunk_length(self)    764 self.close()--> 765 raise InvalidChunkLength(self, line) InvalidChunkLength: InvalidChunkLength(got length b'', 0 bytes read) During handling of the above exception, another exception occurred: ProtocolError                             Traceback (most recent call last)File d:\docinsightenv\Lib\site-packages\requests\models.py:816, in Response.iter_content.<locals>.generate()    815 try:--> 816     yield from self.raw.stream(chunk_size, decode_content=True)    817 except ProtocolError as e: File d:\docinsightenv\Lib\site-packages\urllib3\response.py:624, in HTTPResponse.stream(self, amt, decode_content)    623 if self.chunked and self.supports_chunked_reads():--> 624     for line in self.read_chunked(amt, decode_content=decode_content):    625         yield line File d:\docinsightenv\Lib\site-packages\urllib3\response.py:816, in HTTPResponse.read_chunked(self, amt, decode_content)    811     raise BodyNotHttplibCompatible(    812         "Body should be http.client.HTTPResponse like. "    813         "It should have have an fp attribute which returns raw chunks."    814     )--> 816 with self._error_catcher():    817     # Don't bother reading the body of a HEAD request.    818     if self._original_response and is_response_to_head(self._original_response): File C:\Program Files\Python311\Lib\contextlib.py:155, in _GeneratorContextManager.__exit__(self, typ, value, traceback)    154 try:--> 155     self.gen.throw(typ, value, traceback)    156 except StopIteration as exc:    157     # Suppress StopIteration *unless* it's the same exception that    158     # was passed to throw().  This prevents a StopIteration    159     # raised inside the "with" statement from being suppressed.  File d:\docinsightenv\Lib\site-packages\urllib3\response.py:461, in HTTPResponse._error_catcher(self)    459 except (HTTPException, SocketError) as e:    460     # This includes IncompleteRead.--> 461     raise ProtocolError("Connection broken: %r" % e, e)    463 # If no exception is thrown, we should avoid cleaning up    464 # unnecessarily.  ProtocolError: ("Connection broken: InvalidChunkLength(got length b'', 0 bytes read)", InvalidChunkLength(got length b'', 0 bytes read)) During handling of the above exception, another exception occurred: ChunkedEncodingError                      Traceback (most recent call last)Cell In[12], line 47     45 user_query = "Where does Pfizer Main branch located in India?"     46 token = "0001rpo98AHBj95p1AqsRrO9Mdh2"---> 47 get_chat_completion(user_query, token) Cell In[12], line 36     33 response = requests.post(url, headers=headers, json=data, stream=True)     35 if response.status_code == 200:---> 36     for line in response.iter_lines():     37         if line:     38             # Decode the line from bytes to string and print     39             decoded_line = line.decode('utf-8') File d:\docinsightenv\Lib\site-packages\requests\models.py:865, in Response.iter_lines(self, chunk_size, decode_unicode, delimiter)    856 """Iterates over the response data, one line at a time.  When    857 stream=True is set on the request, this avoids reading the    858 content at once into memory for large responses.    859    860 .. note:: This method is not reentrant safe.    861 """    863 pending = None--> 865 for chunk in self.iter_content(    866     chunk_size=chunk_size, decode_unicode=decode_unicode    867 ):    869     if pending is not None:    870         chunk = pending + chunk File d:\docinsightenv\Lib\site-packages\requests\models.py:818, in Response.iter_content.<locals>.generate()    816     yield from self.raw.stream(chunk_size, decode_content=True)    817 except ProtocolError as e:--> 818     raise ChunkedEncodingError(e)    819 except DecodeError as e:    820     raise ContentDecodingError(e) ChunkedEncodingError: ("Connection broken: InvalidChunkLength(got length b'', 0 bytes read)", InvalidChunkLength(got length b'', 0 bytes read)
